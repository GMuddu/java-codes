	public boolean isBankHoliday(String dateStr) {
		jdbc = (JdbcTemplate) BeanUtil.getBean("eVasJdbcTemplate");
		String sqlStr = ""; // put the sql querry
		List<Map<String,Object>> rows = jdbc.queryForList(sqlStr);
		String tempDate;
		List<String> holidayList = new ArrayList<>();
		for(Map row : rows) {
			tempDate = calculateDate((Integer)row.get("MONTH"),(Integer)row.get("WEEKDAY"),(Integer)row.get("DAY"),(Integer)row.get("OFFSET"));
			holidayList.add(tempDate);
		}
		return holidayList.contains(dateStr);
	}
	
	public  String calculateDate(Integer month, Integer weekday, Integer day, Integer offset) {
		Calendar cal = Calendar.getInstance();
		if(day != null) {
			return cal.get(Calendar.YEAR)+"-"+String.format("%02d", month)+"-"+String.format("%02d", day);
		}else {
			DateFormat formatter = new SimpleDateFormat("yyyy-MM-dd");
			return formatter.format(getDate(month-1,weekday,offset,cal));
		}
		
	}
	
	public  Date getDate(int month, int dayOfWeek, int offset,  Calendar calendar){
	    calendar.set(Calendar.DAY_OF_MONTH, 1);
	    int matchCount = 0;
	    if(offset == -1) {
	    	calendar.set(Calendar.MONTH, month+1);
	    	calendar.add(Calendar.DATE, -1);
	    	while(true){
		        if(calendar.get(Calendar.DAY_OF_WEEK) == dayOfWeek) {
		            matchCount--;
		        }
		        if(matchCount == offset){
		            break;
		        }
		        calendar.add(Calendar.DATE, -1);
		    }
	    	return calendar.getTime();
    	}
	    calendar.set(Calendar.MONTH, month);
	    while(true){
	        if(calendar.get(Calendar.DAY_OF_WEEK) == dayOfWeek) {
	            matchCount++;
	        }
	        if(matchCount == offset){
	            break;
	        }
	        calendar.add(Calendar.DATE, 1);
	        if(calendar.get(Calendar.MONTH) != month){
	            break;
	        }
	    }
	    return calendar.getTime();
	}
